name: k8s-controller ci/cd

on:
    pull_request:
        branches: [ "main" ]
        paths-ignore:
          - 'helm/**'
          - '.github/workflows/**'
          - 'README.md'
    push:
        branches: [ "main" ]
        paths-ignore:
          - 'helm/**'
          - '.github/workflows/**'
          - 'README.md'
        tags: [ 'v*.*.*' ]
        
    workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: k8s-controller
  CHART_NAME: k8s-controller
  TARGETOS: linux
  TARGETARCH: amd64

jobs:
    ci:
        name: CI
        runs-on: ubuntu-latest
        permissions:
          contents: write
          packages: write
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
              token: ${{ secrets.GITHUB_TOKEN }}
              fetch-depth: 0
              ref: main

          - name: Set up Go
            uses: actions/setup-go@v5
            with:
                go-version: '1.21.3'

          - name: Cache Go modules
            uses: actions/cache@v4
            with:
              path: |
                ~/.cache/go-build
                ~/go/pkg/mod
              key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
              restore-keys: |
                ${{ runner.os }}-go-

          - name: Set version      
            id: vars
            run: |
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                VERSION=${GITHUB_REF#refs/tags/}
                APP_VERSION=${VERSION}
                DOCKER_TAG=${VERSION}
              else
                GIT_TAG=$(git describe --tags --always --dirty)
                VERSION=${GIT_TAG}
                APP_VERSION=${GIT_TAG}
                DOCKER_TAG=${GIT_TAG}
              fi
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
              echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT

          - name: Build
            run: make build
          - name: Test
            run: make test

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
          - name: Log in to GHCR
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }} 
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
          
          - name: Build Docker image # github.repository variable has <account>/<repo> form
            run: TARGETOS=${{ env.TARGETOS }} TARGETARCH=${{ env.TARGETARCH }} REGISTRY=${{ env.REGISTRY }}/${{ github.repository }} VERSION=${{ steps.vars.outputs.docker_tag }} make docker-build
          
          - name: Trivy Scan
            uses: aquasecurity/trivy-action@0.28.0
            with:
              exit-code: '1'
              severity: 'CRITICAL,HIGH'
              image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}-${{ env.TARGETOS }}-${{ env.TARGETARCH }}
          
          - name: Push Docker image
            run: docker push ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.docker_tag }}-${{ env.TARGETOS }}-${{ env.TARGETARCH }}
          
          # This step uses mikefarah/yq to extract the chart version from Chart.yaml
          # and sets it as a GitHub Actions output. Although this is a "uses" step,
          # it runs the command in a bash shell, so $GITHUB_OUTPUT works as expected.
          - name: Read chart version from Chart.yaml
            id: chart-version
            uses: mikefarah/yq@v4
            with:
              cmd: echo "chart_version=$(yq '.version' helm/k8s-controller/Chart.yaml)" >> $GITHUB_OUTPUT

          - name: Update image tag in values.yaml
            uses: mikefarah/yq@v4
            env:
              DOCKER_TAG: ${{ steps.vars.outputs.docker_tag }}-${{ env.TARGETOS }}-${{ env.TARGETARCH }}
            with:
              cmd: yq -i '.image.tag=strenv(DOCKER_TAG)' helm/k8s-controller/values.yaml
          
          - name: Update Helm Chart appVersion
            if: startsWith(github.ref, 'refs/tags/')
            uses: mikefarah/yq@v4
            env:
              APP_VERSION: ${{ steps.vars.outputs.app_version }}
            with:
              cmd: yq -i '.appVersion=strenv(APP_VERSION)' helm/k8s-controller/Chart.yaml

          - name: Autoincrement current helm chart version
            id: semver-action
            if: startsWith(github.ref, 'refs/tags/')
            uses: bergshrund/semver-action@main
            with:
              semver: ${{ steps.chart-version.outputs.chart_version }}

          - name: Update Helm Chart version
            if: startsWith(github.ref, 'refs/tags/')
            uses: mikefarah/yq@v4
            with:
              cmd: yq -i '.version="${{ steps.semver-action.outputs.version }}"' helm/k8s-controller/Chart.yaml

          - name: Set Chart version
            id: chart-vars
            run: |
              if [[ $GITHUB_REF == refs/tags/* ]]; then
                CHART_VERSION=${{ steps.semver-action.outputs.version }}
              else
                CHART_VERSION=${{ steps.chart-version.outputs.chart_version }}
              fi
              echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT

          - name: Commit changes
            if: startsWith(github.ref, 'refs/tags/')
            run: |
              git config user.name github-actions
              git config user.email github-actions@users.noreply.github.com
              git commit -am "Update Helm chart version: ${{ steps.chart-vars.outputs.chart_version }} appVersion: ${{ steps.vars.outputs.app_version }}"
              git push origin main

          - name: Package Helm chart
            run: |
              helm package helm/k8s-controller --version ${{ steps.chart-vars.outputs.chart_version }} --app-version ${{ steps.vars.outputs.app_version }}
              mkdir -p chart-artifacts
              mv k8s-controller-${{ steps.chart-vars.outputs.chart_version }}.tgz chart-artifacts/

          - name: Upload Helm chart artifact
            uses: actions/upload-artifact@v4
            with:
              name: helm-chart
              path: chart-artifacts/ 